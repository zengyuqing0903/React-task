{"version":3,"sources":["Showtime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["React","Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","Todoing","delItem","idx","del","todo","map","item","key","prototypes","PropTypes","array","func","defaultProps","Todolist","addItem","data","splice","obj","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className"],"mappings":"+PAEsCA,IAAMC,U,gDCEvBC,E,YACjB,aAAc,IAAD,8BACT,+CAWJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAfnB,EAkBbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eAEKP,EAAEI,OAAOI,KAAOC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAnB7D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CAETC,EAAE,GACFC,EAAE,GACFC,EAAE,IAPG,E,iFAyBTC,QAAQC,IAAIC,MAEZA,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BAEY,2BAAOC,IAAI,IAAIZ,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMC,EAAGU,UAAWL,KAAKlB,YAAawB,KAAK,SAFxH,IAII,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGS,UAAWL,KAAKlB,YAAawB,KAAK,SAJxG,IAMI,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGQ,UAAWL,KAAKlB,YAAawB,KAAK,SANxG,IASI,2BAAIN,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAGzC,2BAAOM,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMD,KAAK,SACxC,4BAAQE,QAAS,WAAKV,QAAQC,IAAI,EAAKQ,IAAInB,SAA3C,qB,GA7CuBR,a,iBCDlB6B,E,2MACjBC,QAAU,SAACC,EAAI5B,GACXe,QAAQC,IAAIhB,GACZ,EAAKE,MAAM2B,IAAID,I,wEAET,IAAD,OACAE,EAAQb,KAAKf,MAAb4B,KACL,OACI,6BACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKJ,GAAN,OACL,wBAAIK,IAAKL,GACJI,EADL,MACa,4BAAQP,QAAS,SAACzB,GAAD,OAAK,EAAKE,MAAM2B,IAAID,EAAI5B,KAAzC,0B,GAbJH,aAyBrC6B,EAAQQ,WAAa,CACjBJ,KAAMK,IAAUC,MAChBP,IAAMM,IAAUE,MAEpBX,EAAQY,aAAe,CACnBR,KAAK,CAAC,EAAE,EAAE,EAAE,I,UC5BKS,E,YACjB,aAAc,IAAD,uBACT,+CAuBJC,QAAU,SAACC,GAEP,EAAKlC,SAAS,CACVuB,KAAK,GAAD,mBAAK,EAAKnB,MAAMmB,MAAhB,CAAqBW,OA3BpB,EA8Bbd,QAAU,SAACC,EAAI5B,GACXe,QAAQC,IAAIhB,GAEZ,IAAI8B,EAAI,YAAQ,EAAKnB,MAAMmB,MAC3BA,EAAKY,OAAOd,EAAI,GAEhB,EAAKrB,SAAS,CACVuB,UAnCJ,EAAKnB,MAAQ,CACTmB,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIa,EAAM,CAAC/B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAKhB+B,OAAOC,OAAO,GAAGF,EAJd,CAAC7B,EAAE,MAPL,OAmBT8B,OAAOE,KAAKH,GAAKI,SAAQ,SAACf,GACtBjB,QAAQC,IAAIgB,GACZjB,QAAQC,IAAI2B,EAAIX,OArBX,E,sEAuDT,OACI,6BACI,kBAAC,EAAD,CAAW7B,IAAKc,KAAKuB,UACrB,kBAAC,EAAD,CAASX,IAAKZ,KAAKU,QAASG,KAAMb,KAAKN,MAAMmB,Y,GA3DvBjC,aCwBtCmD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SA2G1CD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.c4ee8a68.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\n// 类定义组件\r\nexport default class ShowTime extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log(\"constructor\");\r\n        setTimeout(()=>{\r\n            this.setState({//\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log(\"didupdate\");\r\n        console.log(preState);       \r\n        console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getSnapshot\");\r\n        return {name:this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"didmount\");\r\n    }\r\n    render(){\r\n        console.log(\"render\");\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/*条件渲染*/}\r\n                {name.length>5?<div>姓名:{name}</div>:''} {/*代替if else */}\r\n                {name.length>5&&<div>姓名:{name}</div>} {/*代替if*/}                \r\n                <div>{this.state.time}</div>\r\n                {/**循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n// 默认导出:只能默认导出一次，引入组件时可以重命名\r\n// export default ShowTime\r\n\r\n//命名导出；可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime};\r\n\r\n// 直接导出：在class前直接加export default","import React, { Component } from 'react'\r\n// 受控组件：value值被react控制的表单元素\r\n// 可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            // inputValue:''\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        } \r\n    }\r\n    // 类的方法默认是不会绑定this,通过bind绑定this(两种形式:上述为方式1，下方为方式2[箭头函数])\r\n    // 书写的时候采用方式2 \r\n    handleInput = (e)=>{\r\n        // 绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            // inputValue: e.target.value\r\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        //1. this.a.focus();\r\n        this.refs.a.focus();//2,\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*1. <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/> */}\r\n                {/*2.*/}<input ref=\"a\" name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>                \r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>                \r\n                =\r\n                {/* <p>{parseInt(this.state.a===''?0:this.state.a)+parseInt(this.state.b===''?0:this.state.b)+parseInt(this.state.c===''?0:this.state.c)}</p> */}\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>     \r\n                {/* <button onClick={()=>{console.log(this.state.inputValue)}}>提交</button> */}\r\n                {/* 非受控组件:一次性获取或处理表单元素的值  */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>         \r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，\r\n// 在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    delItem = (idx,e)=>{\r\n        console.log(e);\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        todo.map((item,idx)=>\r\n                            <li key={idx}>\r\n                                {item}---<button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                            {/* 外层箭头函数是事件处理函数,idx[下标值]是指传入的参数,\r\n                                this.props.del(idx,e)得到函数del的返回结果 */}\r\n                                {/* {item}---<button onClick={this.delItem.bind(this,idx)}>删除</button> */}\r\n                            </li>\r\n                        )   \r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.prototypes = {\r\n    todo: PropTypes.array,\r\n    del : PropTypes.func\r\n}\r\nTodoing.defaultProps = {\r\n    todo:[1,2,3,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput.js'\r\nimport Todoing from './Todoing.js'\r\nimport { constants } from 'zlib';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1 = {c:300};\r\n        // var o = obj;\r\n        // var o = {...obj};\r\n        // var o = Object.assign(obj,obj1);//将对象obj和obj1整合到obj上，o与obj的引用是一样的\r\n        var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));//\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        //得到obj的属性名组成的数组\r\n        // console.log(Object.keys(obj));\r\n        // 遍历对象forEach()\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);//得到属性名\r\n            console.log(obj[item]);//得到属性值（变量用[]访问）\r\n        })\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx,e)=>{\r\n        console.log(e);\r\n        // 1.不能直接改变或处理state\r\n        let todo =  [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2.setState是异步执行的-\r\n        this.setState({\r\n            todo\r\n        })\r\n        // this.setState((state,props)=>{\r\n        //     console.log(state.todo);//state参数：拿到前一个state\r\n        //     return {\r\n        //         todo:todo\r\n        //     }\r\n        // })\r\n        \r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n            // todo:this.state.num + 100//拿到的值可能不是上一个state值\r\n        // },()=>{\r\n            // console.log(this.state.todo);\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React,{Fragment,Component} from 'react';\n// import {ShowTime} from './Showtime'//命名导出\nimport ShowTime from './Showtime';//默认导出，ShowTime可重命名（即命名任意）\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// 函数声明组件 \n// function ShowTime(props){\n//     console.log(props);\n//     return (\n//         <Fragment>\n//             <div>{props.name}{props.age}</div>\n//             <div>\n//                 {new Date().toLocaleString()}\n//             </div> \n//         </Fragment>\n//     )\n// }\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\nReactDOM.render(<Todolist/>,document.getElementById('root'))//<Todolist/>组件名首字母要大写\n\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>{new Date().toLocaleString()}</div>\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;//实际上是一个对象，转成下方obj的形式\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     \"h1\",\n//     {id:\"tit\",class:\"title\"},\n//     'hello',\n//     React.createElement(\n//         \"p\",\n//         {id:\"t\",class:\"tit\"},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\n\nvar obj = {\n    type:'div',\n    props:{//属性\n        id:'box',\n        class:'box',\n        children:[\n            'hello',\n            'react',\n            {\n                type:'h1',\n                props:{\n                    id:'tit',\n                    class:'tit',\n                    children:[\n                        'hello',\n                        'react',\n                    ]\n                }\n            }\n        ]\n    }\n}\n// 渲染\nfunction render(obj,container){\n    var {type,props} = obj;//解构赋值（ES6）\n    // 文档碎片(?) 相当于虚拟节点\n    var fragment = document.createDocumentFragment();\n    \n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);//递归(传的为实参) 如果是对象，就要再执行一遍外层函数\n                }else{\n                    var txt = document.createTextNode(props.children[i]);//创建文本节点\n                    ele.appendChild(txt);    \n                }\n            }\n        }\n        else{\n            ele[item] = props[item];//.的形式是在找对象中的属性名，而[]的形式是可以找到变量\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'))\n\n/**\n * 页面渲染过程：请求HTML页面，浏览器HTML解析器解析html文件、生成DOM树\n * link引入css文件、css解析器解析css，生成css对象模型，CSSOM和DOM tree结合生成一个render tree\n * 最后浏览器绘制页面\n */\n// 页面回流（重排reflow）:DOM结构结构变化、内容变化、大小、位置的变化（代价最大）\n// 页面重绘（repaint）：颜色的变化（背景色，字体颜色，边框颜色）\n/* 1.文档结构发生变化\n    先用变量进行dom处理，最后一次渲染\n*/\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2.对于样式处理,声明一个css类(在index.css中)\nvar div = document.getElementById('root');         \n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'green';\n\ndiv.className = 'active';\n// 3.offsetLeft、offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4.文档碎片（内存中的一个变量）\n\n\n\n\n\n\n\n"],"sourceRoot":""}